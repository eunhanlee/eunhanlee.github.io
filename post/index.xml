<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Eunhan's library</title><link>https://eunhanlee.github.io/post/</link><description>Recent content in Posts on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Wed, 08 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Brute Force Algorithm</title><link>https://eunhanlee.github.io/post/brute-force-algorithm/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/brute-force-algorithm/</guid><description>Definition check every possible way to find answer.
Points No efficiency most intuitive way to solving problems increase exponential growth one of exhaustive search Example If you find password with brute force algorithm, n=password digits, let&amp;rsquo;s assume 4 k=each digit can contain numbers, let&amp;rsquo;s assume 0~9 Then, all possible ways are $k^n=10^4=10000$ The combination can be in 10000 ways.
When the passwords digits are more than 4, it will be exponential growth.</description></item><item><title>personal blog with Hugo-2.install tools</title><link>https://eunhanlee.github.io/post/personal-blog-with-hugo-2.install-tools/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/personal-blog-with-hugo-2.install-tools/</guid><description>Purpose Create personal blog with Hugo and hosting with github at Windows 10. For this purpose, you need knowledge of HTML, Markdown, and Hugo structure. If you knwo golang, css, js, that will be better. But you do not have to.
used tools install date : 03-31-2021 hugo version : hugo v0.82.0 git version : git version 2.31.1.windows.1 windows : 10 windows terminal: v1.7.572.0 Chocolatey : v0.10.15 install tools windows terminal Install and set up Windows Terminal</description></item><item><title>Arithmetic Operation in Python</title><link>https://eunhanlee.github.io/post/arithmetic-operation-in-python/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/arithmetic-operation-in-python/</guid><description>kinds of Arithmetic Operation in Python Symbol explaination return + Addition depend on input type - Subtraction depend on input type * Multiplication depend on input type / Division real number // Division Integer % Remaineder real number ** power of depend on input type and and logic gare T or F or or logic gate T or F &amp;lt; less than T or F &amp;gt; greater than T or F &amp;lt;= less than or equal T or F &amp;gt;= greater than or equal T or F == equal T or F Result +, -, *, /, //, %, **, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= table A B result int int int A+B result int float float A+B result int bool-T int A+1 result int bool-F int A+0 result int none TypeError int String TypeError float bool-T float A+1 result float bool-F float A+0 result float none TypeError float String TypeError bool none TypeError bool String TypeError none String TypeError When computer created and programming language started, 1 was true and 0 was false.</description></item><item><title>Basic Search Algorithms</title><link>https://eunhanlee.github.io/post/basic-search-algorithms/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/basic-search-algorithms/</guid><description>Basic Search Algorithm Linear Search Binary Search Hashing Linear Search Definition check all of the list one by one.
Time complexity O(n)
Points It does not matter about date type need memory space as total list n Binary Search Definition check middle of list first. if the number is smaller than what you are looking for, check right side only and doing this continuously. It will decrease search list in half.</description></item><item><title>Loop vs. Recursion</title><link>https://eunhanlee.github.io/post/loop-vs.-recursion/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/loop-vs.-recursion/</guid><description>Definition Saperate big problem into small repeated parts and solve the problem.
All Recursion can be converted to Loop.
Good and bad points Loop Recursion intuitive complicated Long codes short codes good readability bad readability use less stack memories use much stack memories very low possiblity to get Stack overflow Stack overflow if too mcuh call very low possiblity to get overhead issue overhead issue: call function repeatly will make program slow each level of variable state will not saved each level of variable state will saved because of stack Actual code We should write recursion because it is good for reading and fixing it.</description></item><item><title>personal blog with Hugo-1.Notions</title><link>https://eunhanlee.github.io/post/personal-blog-with-hugo-1.notions/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/personal-blog-with-hugo-1.notions/</guid><description>Purpose Create personal blog with Hugo and hosting with github at Windows 10. For this purpose, you need knowledge of HTML, Markdown, and Hugo structure. If you knwo golang, css, js, that will be better. But you do not have to.
used tools install date : 03-31-2021 hugo version : hugo v0.82.0 git version : git version 2.31.1.windows.1 windows : 10 windows terminal: v1.7.572.0 Chocolatey : v0.10.15 Notions hugo?</description></item><item><title>Tail Recursion</title><link>https://eunhanlee.github.io/post/tail-recursion/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/tail-recursion/</guid><description>Definition A method of recursion optimization
Principle When there is recursion, the recursive class remain in stack memory and it will cause overflow. The tail call elimination is created for fixing the overflow issue. If the reucursive class return everything at last, the class does need to remain in stack memory.
Other Names tail call elimination tail call optimization How to Change return part of recursion to call function only.</description></item><item><title>Variables of Python</title><link>https://eunhanlee.github.io/post/variables-of-python/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/variables-of-python/</guid><description>Kinds of Variables scalar and non-scalar both object
scalar int : integer float : real number bool : True or False none : Null non-scalar String : data values that are made up of ordered sequences of characters, such as &amp;ldquo;hello world&amp;rdquo; checking data type print(type(Variable)) Case-Sensitive a and A are different variable
Casting x = str(3) # &amp;#34;4&amp;#34; y = int(3) # 4 z = float(3) # 4.</description></item><item><title>How to write Good Code</title><link>https://eunhanlee.github.io/post/how-to-write-good-code/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/how-to-write-good-code/</guid><description>Clarity Input and Output Most mistakes are coming from misunderstanding of range for the input and output. We need to find the range of input and output specifically.
Each Steps of Algorithm must be Clear The steps of algorithm separated clearly. Thus, you or co-workers may not misunderstand the code.
Need to Study computer structure Some codes got issue because of computer structure. If you calculate int type addition, the result is wrong because integer overflow.</description></item><item><title>uplaod [Android Studio Source code] to [Github]</title><link>https://eunhanlee.github.io/post/uplaod-android-studio-source-code-to-github/</link><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/uplaod-android-studio-source-code-to-github/</guid><description>1. create repository in github: Repository is kind of folders on your github. Set name and create. Other settings are not needed.
2. taps on top of the Android Studio, click VCS -&amp;gt; Enable Version Control Integration. 3. It will ask something, choose git and push ok button. : There are many other websites that similar to github. Check buttom tab that has Git:master
4. click VCS -&amp;gt; Commit 5. Choose files that you want to upload.</description></item><item><title>What is Algorithm</title><link>https://eunhanlee.github.io/post/what-is-algorithm/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/what-is-algorithm/</guid><description>Definition specific method of solving the problem
the problem: It need to be clear. input and output is stated in exact range. specific method: If you do not know how to solve that problem, you can solve it with specific steps.
Example If you get drink from a vending machine,
put cash select drink get drink This is kind of algorithm. However, it specfic enough for computers.
get $3 cash from wallet find input location insert cash into the cending machine check how many kinds of drink choose drink what you want push button for the drink pick up the drink.</description></item><item><title>[Android_Kotlin code]Creade Button</title><link>https://eunhanlee.github.io/post/android_kotlin-codecreade-button/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/android_kotlin-codecreade-button/</guid><description>Steps create button in layout/activity_main.xml create strings on button in values/strings.xml connect button and set event in MainActivity.kt padding and margin 1. create button in layout/activity_main.xml &amp;lt;Button android:id=&amp;#34;@+id/button&amp;#34; android:layout_width=&amp;#34;wrap_content&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:layout_margin=&amp;#34;10dp&amp;#34; android:padding=&amp;#34;10dp&amp;#34; android:text=&amp;#34;@string/btn&amp;#34; android:textColor=&amp;#34;@color/black&amp;#34; app:backgroundTint=&amp;#34;@color/white&amp;#34; /&amp;gt; 2. create strings on button in values/strings.xml &amp;lt;string name=&amp;#34;btn&amp;#34;&amp;gt;Button&amp;lt;/string&amp;gt; 3. connect button and set event in MainActivity.kt import android.widget.Button class MainActivity : AppCompatActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) // set id from activity_main.</description></item><item><title>install [git] to [windows 10]</title><link>https://eunhanlee.github.io/post/install-git-to-windows-10/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/install-git-to-windows-10/</guid><description>purpose install [git] to [windows 10]
What is git? commend based program that is for tracking file changes. Origianlly, it invented for programming, thus, git file contains information of when did the file created, changed and moved.
steps 1. downlad git official link
2. install the program 3. installation settings Additional icons &amp;gt; On the Desktop : create shortcut
Windows Exporer integration
Git Bash Here : Git Bash connection, any folder can connect with git right away Git GUI Here : Git GUI connection, create some GUI on right click menu Git LFS (Large File Support) - origianlly git was for coding.</description></item><item><title>what is diffence between comparator and compatable in JAVA</title><link>https://eunhanlee.github.io/post/what-is-diffence-between-comparator-and-compatable-in-java/</link><pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/what-is-diffence-between-comparator-and-compatable-in-java/</guid><description>Definition Both interfaces are very similer because they are for sorting lists and arrays. However, one is for one condition and other one is for mutiple conditions.
Difference Comparable Comparator java.lang package. java.util package. Comparable affects the original class Comparator doesn&amp;rsquo;t affect the original class compareTo() method with 1 parameter compare() method with 2 parameters Collections.sort(List) Collections.sort(List, Comparator) Arrays.</description></item><item><title>i++ vs. ++i prefix operator and postfix operator</title><link>https://eunhanlee.github.io/post/i++-vs.-++i-prefix-operator-and-postfix-operator/</link><pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/i++-vs.-++i-prefix-operator-and-postfix-operator/</guid><description>code name How ++i prefix increment operator i = i+1;return i; i++ postfix increment operator final int t = i; i = i+1; return t; &amp;ndash;i prefix decrement operator i = i-1;return i; i&amp;ndash; postfix decrement operator final int t = i; i = i-1; return t; int x = 2; int y = 2; System.</description></item><item><title>stable vs. unstable sorts</title><link>https://eunhanlee.github.io/post/stable-vs.-unstable-sorts/</link><pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/stable-vs.-unstable-sorts/</guid><description>Definition Stable and unstable is depend on how sort any duplicated list.
If the algorithm keeps original position of duplicated values, it is stable sort algorithm
If the algorithm positioned duplicated values randomly, it is unstable sort algorithm
Example raw list=[3(1), 7(1), 3(2), 4, 7(2), 9]
stable sorted list=[3(1), 3(2), 4, 7(1), 7(2), 9]
unstable sorted list=[3(2), 3(1), 4, 7(2), 7(1), 9]
Stable Sorting Bubble Sort
Insertion Sort
Merge Sort</description></item><item><title>[JavaException]IllegalArgumentException</title><link>https://eunhanlee.github.io/post/javaexceptionillegalargumentexception/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/javaexceptionillegalargumentexception/</guid><description>Reason Thrown to indicate that a method has been passed an illegal or inappropriate argument.
argument is actual values that are passed to variables If you put any actual values that is not correct for the variable, it will cause IllegalArgumentException
Example int a = 2147483649; // value is too big int a = -2147483649; // value is too small String date=&amp;#34;08-07-1990&amp;#34;; // format is dd-MM-yyyy Date format=new SimpleDateFormat(&amp;#34;dd/MM/yyyy&amp;#34;).parse(date);// format is different Solution check input value range check calculation that can be over the variable limitation use try-catch block</description></item><item><title>Primitive type and Reference type in Java</title><link>https://eunhanlee.github.io/post/primitive-type-and-reference-type-in-java/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/primitive-type-and-reference-type-in-java/</guid><description>Kinds of Data Type in Java Primitive type Java provides 8 kinds of Primitive type. Primitive data types cannot contain null actual value will saved in Stack memory. data type base memory defult value range of data range of data in number boolean 1 byte false true, false true, false byte 1 byte 0 -127 ~ 128 $-2^{7}$~ $(2^{7}-1)$ short 2 byte 0 -32,768 ~ 32,767 $-2^{15}$~ $(2^{15}-1)$ int 4 byte 0 -2,147,483,648 ~ 2,147,483,647 $-2^{31}$~ $(2^{31}-1)$ long 8 byte 0L -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 $-2^{63}$~ $(2^{63}-1)$ float 4 byte 0.</description></item><item><title>what happen if + or - with Char in JAVA</title><link>https://eunhanlee.github.io/post/what-happen-if-+-or-with-char-in-java/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/what-happen-if-+-or-with-char-in-java/</guid><description>Result code result char type + int type return unicode char type - int type error int type + char type return unicode int type - char type error char type + char type return unicode char type - char type return unicode String is not Primitive Data Type. This is object example of use For lexicographical order for (int i = 0; i &amp;lt; order.</description></item><item><title>what is difference between Error and Exception in Java</title><link>https://eunhanlee.github.io/post/what-is-difference-between-error-and-exception-in-java/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/what-is-difference-between-error-and-exception-in-java/</guid><description>What is Error Programs run something that is not what programmers wanted or shutdown unexpectedly. Any causes of that action are Error.
Kinds of Errors compile-time error compile failed. usually, wrong lanuage keyword used. python does not understand &amp;ldquo;System.out.println&amp;rdquo; This code is for JAVA.
runtime error crash during the programs run. put values in int arr[5] that array size is 3
logical error programmer created wrong process. you wanted to put blue in variable x.</description></item><item><title>[JAVA code]reverse node</title><link>https://eunhanlee.github.io/post/java-codereverse-node/</link><pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/java-codereverse-node/</guid><description> public static ListNode reverse(ListNode head) { ListNode prev = null; while (head != null) { ListNode next = head.next; head.next = prev; prev = head; head = next; } return prev; } Time complexity : $O(n)$ Space complexity : $O(1)$ input : head node of LinkedList output : head node of LinkedList</description></item><item><title>inclusive and exclusive</title><link>https://eunhanlee.github.io/post/inclusive-and-exclusive/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/inclusive-and-exclusive/</guid><description>Inclusive - Including the last number
Exclusive - Excluding the last number
In Computer Science, inclusive/exclusive apply to a number range
Example inclusive If a function will compute $2^i$ where $i = 1, 2, &amp;hellip;, n$.
$i$ can have values from 1 up to and including the value n.
We says, n is Included in Inclusive
1 through 10 (inclusive) = [1, 10] 1 2 3 4 5 6 7 8 9 10 exclusive If a function will compute $2^i$ where i = 1, 2, .</description></item><item><title>[JAVA code]Alphabetical Order</title><link>https://eunhanlee.github.io/post/java-codealphabetical-order/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/java-codealphabetical-order/</guid><description>Alphabetical Order Time complexity : $O(n\ log\ n)$ Space complexity : $O(1)$ For List Collections.sort(List&amp;lt;String&amp;gt;_values); For Array Arrays.sort(String[]array); Time complexity : $O(n^2)$ Space complexity : $O(1)$ public static String[] LexicalOrder(String[] words) { int n = words.length; for (int i = 0; i &amp;lt; n - 1; ++i) { for (int j = i + 1; j &amp;lt; n; ++j) { if (words[i].compareTo(words[j]) &amp;gt; 0) { String temp = words[i]; words[i] = words[j]; words[j] = temp; } } } return words; }</description></item></channel></rss>