<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ProblemSolving on Eunhan's library</title><link>https://eunhanlee.github.io/topics/problemsolving/</link><description>Recent content in ProblemSolving on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Fri, 10 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/topics/problemsolving/index.xml" rel="self" type="application/rss+xml"/><item><title>Add Strings</title><link>https://eunhanlee.github.io/post/add-strings/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/add-strings/</guid><description>Problem Problem_Link
My Answer 1 hour limit no search on internet My code class Solution { public String addStrings(String num1, String num2) { StringBuilder sb = new StringBuilder(); int num1Leng = num1.length() - 1; int num2Leng = num2.length() - 1; int round = 0; for (int i = Math.max(num1.length(), num2.length()) - 1; i &amp;gt; -1; --i) { if (num1Leng &amp;lt; 0) { sb.append(String.valueOf(((num2.charAt(num2Leng) - 48) + round)%10)); if ((((num2.</description></item><item><title>Remove Duplicates from Sorted Array</title><link>https://eunhanlee.github.io/post/remove-duplicates-from-sorted-array/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/remove-duplicates-from-sorted-array/</guid><description>Problem Problem_Link
My Answer 1 hour limit no search on internet My code class Solution { public int removeDuplicates(int[] nums) { if(nums==null ||nums.length==0) return 0; int temp = -101; int count=0; int pos=0; for(int i=0;i&amp;lt;nums.length;++i){ if(temp!=nums[i]){ temp=nums[i]; nums[pos]=nums[i]; ++count; ++pos; } } return count; } } Time complexity : $O(n)$ Space complexity : $O(1)$ My result Runtime: 2 ms, faster than 22.76% of Java online submissions for Remove Duplicates from Sorted Array.</description></item><item><title>Count Binary Substrings</title><link>https://eunhanlee.github.io/post/count-binary-substrings/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/count-binary-substrings/</guid><description>Problem Problem_Link
My Answer 1 hour limit no search on internet My result Compile Error Best Answer Search from internet and modify
class Solution { public int countBinarySubstrings(String s) { int curRun = 1; int preRun = 0; int count = 0; for (int i = 1; i &amp;lt; s.length(); i++) { if (s.charAt(i) == s.charAt(i - 1)) ++curRun; else { count += Math.min(curRun, preRun); preRun = curRun; curRun = 1; } } return count + Math.</description></item><item><title>Two Sum</title><link>https://eunhanlee.github.io/post/two-sum/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/two-sum/</guid><description>Problem Problem_Link
My Answer 1 hour limit no search on internet Overview input : int[] nums, int target output : int[] My code class Solution { public int[] twoSum(int[] nums, int target) { int temp[] = new int[nums.length]; int rtn[] = new int[2]; for (int i = 0; i &amp;lt; nums.length; i++) { temp[i] = target - nums[i]; for (int j = 0; j &amp;lt; i; j++) { if (temp[j] == nums[i]) { rtn[0] = j; rtn[1] = i; return rtn; } } } rtn[0] = 0; rtn[1] = 0; return rtn; } } Time complexity : $O(n^2)$ Space complexity : $O(1)$ My result Runtime: 76 ms, faster than 12.</description></item></channel></rss>