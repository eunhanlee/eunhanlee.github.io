<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stack on Eunhan's library</title><link>https://eunhanlee.github.io/tags/stack/</link><description>Recent content in Stack on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Wed, 21 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/tags/stack/index.xml" rel="self" type="application/rss+xml"/><item><title>[JAVA code]stack</title><link>https://eunhanlee.github.io/post/java-codestack/</link><pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/java-codestack/</guid><description>private Stack&amp;lt;Integer&amp;gt; stack; this.stack = = new Stack&amp;lt;&amp;gt;(); Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); //int type stack stack.push(1); // add value stack.pop(); // remove value and return the value of top stack.clear(); // remove all value stack.peek(); // return the value of top stack.size(); stack.empty(); // check the stack is empty(if empty true) stack.contains(1) // check the value 1 is in stack (if there, true) worst O(n)</description></item></channel></rss>