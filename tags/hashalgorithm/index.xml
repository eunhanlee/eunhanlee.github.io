<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HashAlgorithm on Eunhan's library</title><link>https://eunhanlee.github.io/tags/hashalgorithm/</link><description>Recent content in HashAlgorithm on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Tue, 16 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/tags/hashalgorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Hash Algorithm - Uniformity</title><link>https://eunhanlee.github.io/post/hash-algorithm-uniformity/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/hash-algorithm-uniformity/</guid><description>Definition one of properties for Hash algorithm map the expected inputs as evenly as possible over its output range without hash crash.
Example [input]-&amp;gt;[output]
first hash algorithm A-&amp;gt;03 B-&amp;gt;02 C-&amp;gt;03
second hash algorithm A-&amp;gt;01 B-&amp;gt;02 C-&amp;gt;03
explanation if the uniformity of hash algorithm is high, it less create hash crush. Thus, the second hash algorithm&amp;rsquo;s uniformity is higher than the first hash algorithm
conclusion high uniformity = less hash crush = higher possible to learn with O(1) of time complexity other questions Can we possible to make perfect hash algorithm that does not make any hash crush?</description></item><item><title>Hash Algorithm</title><link>https://eunhanlee.github.io/post/hash-algorithm/</link><pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/hash-algorithm/</guid><description>Definition hash function transfer any value to certain conditioned value such as length. If the input value is same, the output value should be same.
In use encryption Hashtable is using hash function to store values quickly. Comparing two huge data to verify same file or not quickly. Kinds cryptographic hash function : hash function that used for encryption hash function : hash function that does not used for encryption Properties efficiency uniformity collision resistance pre-image resistance second pre-image resistance</description></item></channel></rss>