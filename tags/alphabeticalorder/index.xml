<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AlphabeticalOrder on Eunhan's library</title><link>https://eunhanlee.github.io/tags/alphabeticalorder/</link><description>Recent content in AlphabeticalOrder on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Sun, 04 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/tags/alphabeticalorder/index.xml" rel="self" type="application/rss+xml"/><item><title>[JAVA code]Alphabetical Order</title><link>https://eunhanlee.github.io/post/java-codealphabetical-order/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/java-codealphabetical-order/</guid><description>Alphabetical Order According to ASCII rules [numbers][capital letters][lowercase letters] 0 ~ 9, A ~ Z, a ~ z
Time complexity : $O(n\ log\ n)$ Space complexity : $O(1)$ For List Collections.sort(List&amp;lt;String&amp;gt;_values); For Array Arrays.sort(String[]array); Time complexity : $O(n^2)$ Space complexity : $O(1)$ public static String[] LexicalOrder(String[] words) { int n = words.length; for (int i = 0; i &amp;lt; n - 1; ++i) { for (int j = i + 1; j &amp;lt; n; ++j) { if (words[i].</description></item></channel></rss>