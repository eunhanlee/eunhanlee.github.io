<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fibonacci number on Eunhan's library</title><link>https://eunhanlee.github.io/tags/fibonacci-number/</link><description>Recent content in Fibonacci number on Eunhan's library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2021. All rights reserved.</copyright><lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://eunhanlee.github.io/tags/fibonacci-number/index.xml" rel="self" type="application/rss+xml"/><item><title>Fibonacci sequence</title><link>https://eunhanlee.github.io/post/fibonacci-sequence/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://eunhanlee.github.io/post/fibonacci-sequence/</guid><description>Definition Certain patterns of numbers.
first and second numbers are always 0,1. next number is addition of previous two numbers
Recurrence Relation $F_0=0$
$F_1=1$
$F_n=F_{n-1}+F_{n-2}$
Example index fibonacci numbers calculation 0 0 0 1 1 1 2 1 0+1 3 2 1+1 4 3 1+2 5 5 2+3 6 8 3+5 7 13 5+8 8 21 8+13 9 34 13+21 10 55 21+34 11 89 34+55 12 144 55+89 13 233 89+144 14 377 144+233 15 610 233+377 16 987 377+610 get nth fibonacci number Repeat unsigned int fibonacci_iter(unsigned int n) { if (n == 0) return 0; else if (n == 1) return 1; else { int result = 0; int iterA = 0; int iterB = 1; for (int i = 2; i &amp;lt;= n; i++) { result = iterA + iterB; iterA = iterB; iterB = result; } return result; } } recuresive unsigned int fibonacci_rcsv(unsigned int n) { if (n == 0) return 0; else if (n == 1) return 1; else return fibonacci_rcsv(n - 2) + fibonacci_rcsv(n - 1); } math public int fib(int N) { double goldenRatio = (1 + Math.</description></item></channel></rss>